import java.io.*;
import java.net.Socket;
import java.util.ArrayList;

public class ClientHandler3 implements Runnable {
    private String clientUsername;
    private Socket socket;
    private BufferedReader bufferedReader;
    private BufferedWriter bufferedWriter;
    private String groupChatValue;

    public ClientHandler3(Socket socket) {
        try {
            this.socket = socket;
            this.bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
            this.bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            this.clientUsername = bufferedReader.readLine();
            this.groupChatValue = bufferedReader.readLine();
            Server.clientHandlers.add(this);
            //System.out.println("Added " + this.toString());
            broadcastMessage("Server: " + clientUsername + " has entered the chat");
        } catch (IOException e) {
            e.printStackTrace();
            closeEverything(socket, bufferedReader, bufferedWriter);
        }
    }

    @Override
    public void run() {
        String messageFromClient;
        try {
            while ((messageFromClient = bufferedReader.readLine()) != null) {
                if (messageFromClient.equals("EXITCOND")) {
                    closeEverything(socket, bufferedReader, bufferedWriter);
                    break;
                } else {
                    broadcastMessage(messageFromClient);
                }
            }
        } catch (IOException e) {
            //e.printStackTrace();
            closeEverything(socket, bufferedReader, bufferedWriter);
        }
    }

    public void broadcastMessage(String messageToSend) {
            for (ClientHandler3 clientHandler : Server.clientHandlers) {
                try {
                    if (clientHandler.groupChatValue.equals(groupChatValue) && !clientHandler.clientUsername.equals(clientUsername)) {
                        clientHandler.bufferedWriter.write(messageToSend);
                        clientHandler.bufferedWriter.newLine();
                        clientHandler.bufferedWriter.flush();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                    clientHandler.closeEverything(socket, bufferedReader, bufferedWriter);
                }
            }
    }

    public void closeEverything(Socket socket, BufferedReader bufferedReader, BufferedWriter bufferedWriter) {
            Server.clientHandlers.remove(this);
            System.out.println("A client has disconnected");
            //System.out.println("Removed " + this.toString());
            broadcastMessage("Server " + clientUsername + " has left the chat");
            try {
                if (bufferedReader != null) {
                    bufferedReader.close();
                }
                if (bufferedWriter != null) {
                    bufferedWriter.close();
                }
                if (socket != null) {
                    socket.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
